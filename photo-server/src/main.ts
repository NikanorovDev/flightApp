import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { WinstonModule } from 'nest-winston';
import * as winston from 'winston';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: WinstonModule.createLogger({
      transports: [new winston.transports.File({ filename: 'app.log' })],
    }),
  });
  const config = app.get(ConfigService);
  const port = config.get<number>('PORT') || 3000;
  await app.listen(port);
}
bootstrap();


// Приведенный фрагмент кода является точкой входа приложения NestJS, где приложение загружается и настраивается перед началом прослушивания входящих запросов. Вот подробное описание его компонентов и функциональности:

// Ключевые компоненты
// Импорты:

// NestFactory импортируется из @nestjs/core, что является утилитой для создания и инициализации приложения NestJS.
// AppModule импортируется из локального файла модуля, который служит корневым модулем приложения.
// ConfigService импортируется из @nestjs/config, что обеспечивает доступ к переменным конфигурации.
// WinstonModule импортируется из nest-winston, который интегрирует библиотеку журналирования (журнал логов) Winston в приложение NestJS.
// Функция Bootstrap:

// Функция Bootstrap определяется как асинхронная функция, которая обрабатывает инициализацию приложения.
// Создание приложения:

// NestFactory.create(AppModule, { ... }): Эта строка создает экземпляр приложения, используя AppModule в качестве корневого модуля. Она также настраивает пользовательский регистратор с помощью Winston:
// WinstonModule.createLogger({ ... }): Это настраивает регистратор Winston , который записывает сообщения журнала в app.log. Это позволяет регистрировать события и ошибки приложения в файл.
// Доступ к конфигурации:

// const config = app.get(ConfigService);: Это извлекает экземпляр ConfigService из контекста приложения, который используется для доступа к переменным конфигурации, определенным в приложении.
// const port = config.get<number>('PORT') || 3000;: Эта строка пытается получить переменную конфигурации PORT из среды (или других источников) и по умолчанию принимает значение 3000, если она не определена.
// Запуск приложения:

// await app.listen(port);: Эта строка запускает приложение и заставляет его прослушивать входящие запросы на указанном порту.
// Вызов функции Bootstrap:

// bootstrap();: Наконец, функция Bootstrap вызывается для запуска процесса инициализации приложения.
// Резюме
// Вкратце, этот фрагмент кода инициализирует приложение NestJS, создавая экземпляр приложения с помощью корневого модуля (AppModule), настраивает механизм ведения журнала с помощью Winston для записи сообщений в файл, извлекает параметры конфигурации и запускает приложение на указанном порту.

// Эта структура типична для приложения NestJS, обеспечивая модульность и настраиваемость, а также гарантируя, что ведение журнала выполняется структурированным образом. Использование асинхронных функций и внедрения зависимостей помогает поддерживать чистый и поддерживаемый код.