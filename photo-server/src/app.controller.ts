import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  serverRunInfo(): string {
    return this.appService.serverRunInfo();
  }
}


// Этот фрагмент кода определяет класс AppController в приложении NestJS. AppController отвечает за обработку входящих HTTP-запросов, связанных с приложением. Вот подробное описание его компонентов и функциональности:

// Ключевые компоненты
// Импорты:

// Декораторы Controller и Get импортируются из @nestjs/common.
// AppService импортируется из того же каталога, который содержит бизнес-логику для приложения.
// Определение контроллера:

// Класс AppController декорируется декоратором @Controller(). Этот декоратор отмечает класс как контроллер, который может обрабатывать входящие HTTP-запросы. Поскольку в декораторе не определен конкретный маршрут, этот контроллер будет обрабатывать запросы к корневому URL-адресу (/).
// Конструктор:

// Конструктор принимает экземпляр AppService в качестве параметра, который внедряется с помощью системы внедрения зависимостей NestJS. Модификатор private readonly указывает, что этот экземпляр является частным для класса и не может быть изменен после инициализации.
// Метод конечной точки:

// Метод serverRunInfo декорирован декоратором @Get(), указывающим, что он будет отвечать на запросы GET, отправленные на корневой URL (/).
// Этот метод вызывает метод serverRunInfo() AppService и возвращает его результат в виде строки. Обычно это используется для предоставления некоторой информации о состоянии или конфигурации сервера.
// Резюме
// Вкратце, AppController служит простым контроллером для обработки запросов GET к корневой конечной точке приложения. Он полагается на AppService для инкапсуляции бизнес-логики, что позволяет четко разделить задачи. Эта структура является распространенным шаблоном в приложениях NestJS, способствующим модульности и удобству обслуживания.

// Если метод serverRunInfo() в AppService возвращает информацию о сервере (например, его состояние или сведения о конфигурации), то обращение к корневому URL предоставит эту информацию клиенту.