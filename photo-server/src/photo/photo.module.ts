import { Module } from '@nestjs/common';
import { PhotoService } from './photo.service';
import { PhotoController } from './photo.controller';

@Module({
  controllers: [PhotoController],
  providers: [PhotoService],
})
export class PhotoModule {}



// Этот фрагмент кода определяет модуль в приложении NestJS, специально предназначенный для обработки функций, связанных с фотографиями. Вот разбивка его компонентов:

// Импорты: Код импортирует декоратор Module из пакета @nestjs/common вместе с PhotoService и PhotoController.

// Определение модуля: Класс PhotoModule декорирован декоратором @Module, который используется для определения модуля в NestJS. Модуль — это класс, аннотированный декоратором @Module, который может инкапсулировать связанные компоненты, такие как службы и контроллеры. 

// Контроллеры: Массив контроллеров содержит PhotoController. Это означает, что PhotoController будет обрабатывать входящие запросы, связанные с фотографиями.

// Поставщики: Массив поставщиков включает PhotoService. Это означает, что PhotoService будет доступен для внедрения зависимостей в этом модуле и может использоваться PhotoController или любыми другими поставщиками в модуле.

// Экспорт: Сам класс PhotoModule экспортируется, что делает его доступным для импорта в другие части приложения.

// Подводя итог, PhotoModule инкапсулирует логику обработки фотографий в приложении, группируя PhotoController и PhotoService вместе. Этот модульный подход помогает эффективно организовывать код и управлять зависимостями в рамках NestJS.